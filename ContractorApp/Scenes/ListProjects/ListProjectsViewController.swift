//
//  ListProjectsViewController.swift
//  ContractorApp
//
//  Created by Zaizen Kaegyoshi on 10/25/17.
//  Copyright (c) 2017 Team5. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListProjectsDisplayLogic: class
{
    func displayProjects(viewModel: ListProjects.FetchProjects.ViewModel)
}

class ListProjectsViewController: UIViewController, ListProjectsDisplayLogic
{
    var interactor: ListProjectsBusinessLogic?
    var router: (NSObjectProtocol & ListProjectsRoutingLogic & ListProjectsDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = ListProjectsInteractor()
        let presenter = ListProjectsPresenter()
        let router = ListProjectsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    var projects: [Project] = []
    var doSelect: Bool = false
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        projectsTableView.register(UINib(nibName: "ProjectTableCell", bundle: nil), forCellReuseIdentifier: "ProjectCell")
        projectsTableView.setAutomaticHeight(estimated: 130)
        
        self.navigationController?.clearShadow()
        
        fetchProjects()
    }
    override func viewWillAppear(_ animated: Bool) {
        fetchProjects()
    }
    override func viewDidAppear(_ animated: Bool) {
        fetchProjects()
    }
    
    // MARK: Do something
    
    @IBOutlet weak var projectsTableView: UITableView!
    
    
    
    func fetchProjects() {
        self.interactor?.fetchProjects()
    }
    func displayProjects(viewModel: ListProjects.FetchProjects.ViewModel) {
        self.doSelect = viewModel.doSelect
        self.projects = viewModel.projects
        self.projectsTableView.reloadData()
    }
}
extension ListProjectsViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.projects.count
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "ProjectCell") as! ProjectTableCell
        cell.setCell(project: self.projects[indexPath.row])
        return cell
    }
}
extension ListProjectsViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if !doSelect {
            self.performSegue(withIdentifier: "ShowProject", sender: self)
            tableView.deselectRow(at: indexPath, animated: false)
        } else {
            self.interactor?.addConversation(index: indexPath.row)
            self.dismiss(animated: true, completion: nil)
        }
        
    }
}
