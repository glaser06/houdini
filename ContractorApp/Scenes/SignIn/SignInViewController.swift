//
//  SignInViewController.swift
//  ContractorApp
//
//  Created by Zaizen Kaegyoshi on 11/15/17.
//  Copyright (c) 2017 Team5. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Firebase
import GoogleSignIn

protocol SignInDisplayLogic: class
{
    func displaySomething(viewModel: SignIn.Something.ViewModel)
}

class SignInViewController: UIViewController, SignInDisplayLogic, GIDSignInUIDelegate, GIDSignInDelegate
{
    var interactor: SignInBusinessLogic?
    var router: (NSObjectProtocol & SignInRoutingLogic & SignInDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = SignInInteractor()
        let presenter = SignInPresenter()
        let router = SignInRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    @IBOutlet weak var signInButton: GIDSignInButton!
    var handle: AuthStateDidChangeListenerHandle?
    
    var ref: DatabaseReference!
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        GIDSignIn.sharedInstance().uiDelegate = self
        GIDSignIn.sharedInstance().signInSilently()
//        GIDSignIn.sharedInstance().hasAuthInKeychain()
//        GIDSignIn.sharedInstance().behav
        self.configureDatabase()
        handle = Auth.auth().addStateDidChangeListener() { (auth, u) in
            if u != nil {
                self.ref.child("users").child(u!.uid).observeSingleEvent(of: .value, with: { (snapshot) in
//                    if snapshot.value == nil {
//                        print("no snapshot")
//                        self.ref.child("users").child(u!.uid).setValue([
//
//                            "username": u!.displayName,
//                            "id": u!.uid,
//                            "registered_at": Date().timeIntervalSince1970
//                            ])
//                    }
                    let userData = snapshot.value as? NSDictionary
                    let registration = userData?["registered_at"] as? Double
                    if registration == nil {
                        print("no registration aaaaaaaaaaaaaaaaaa \n\n\n\n\n")
                        self.ref.child("users").child(u!.uid).updateChildValues(["registered_at": Date().timeIntervalSince1970,
                                                                                 "is_contractor": false])
                        
//                            .setValue([
//                            "username": u!.displayName,
//                            "id": u!.uid,
//                            "registered_at": Date().timeIntervalSince1970
//                            ])
                    }
                    self.performSegue(withIdentifier: "Home", sender: self)
                })
                
//                self.ref.child("users").child(u!.uid).setValue(<#T##value: Any?##Any?#>)
//                if
                
            }else {
                print(u)
            }
        }
    }
    func configureDatabase() {
        self.ref = Database.database().reference()
        
    }
    deinit {
        if let handle = handle {
            Auth.auth().removeStateDidChangeListener(handle)
        }
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
    @IBAction func close() {
        if let _ = self.presentingViewController {
            self.dismiss(animated: true, completion: nil)
        } else {
            self.performSegue(withIdentifier: "Home", sender: self)
        }
        
    }
    
    
    func displaySomething(viewModel: SignIn.Something.ViewModel)
    {
        //nameTextField.text = viewModel.name
    }
    func sign(_ signIn: GIDSignIn!, didSignInFor user: GIDGoogleUser!, withError error: Error!) {
        // ...
        if let error = error {
            // ...
            return
        }
        
        guard let authentication = user.authentication else { return }
        let credential = GoogleAuthProvider.credential(withIDToken: authentication.idToken,
                                                       accessToken: authentication.accessToken)
        Auth.auth().signIn(with: credential) { (user, error) in
            if let error = error {
                print("ERROR 123")
                print(error)
                return
            }
            // User is signed in
            // ...
        }
    }
}
