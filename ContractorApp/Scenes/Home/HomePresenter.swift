//
//  HomePresenter.swift
//  ContractorApp
//
//  Created by Zaizen Kaegyoshi on 11/8/17.
//  Copyright (c) 2017 Team5. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomePresentationLogic
{
    func presentCategories(response: Home.FetchCategories.Response)
    func presentBusinesses(response: Home.FetchBusinesses.Response)
    func updateImage(response: Home.UpdateImage.Response)
}

class HomePresenter: HomePresentationLogic
{
    weak var viewController: HomeDisplayLogic?
    
    // MARK: Do something
    
    func presentCategories(response: Home.FetchCategories.Response) {
        self.viewController?.displayCategories(viewModel: Home.FetchCategories.ViewModel(data: response.data))
    }
    func updateImage(response: Home.UpdateImage.Response) {
        DispatchQueue.main.async {
            self.viewController?.updateImage(vm: Home.UpdateImage.ViewModel(image: response.image, section: response.section, index: response.index))
        }
        
        
    }
    func presentBusinesses(response: Home.FetchBusinesses.Response) {
        var passingOn: [String: [Home.FetchBusinesses.ViewModel.DisplayableBusiness]] = [:]
        for each in response.businesses {
            let category = each.key
            var anotherList: [Home.FetchBusinesses.ViewModel.DisplayableBusiness] = []
            for business in each.value {
                let image: UIImage = business.images.count > 0 ? business.images[0] : UIImage()
                let displayed = Home.FetchBusinesses.ViewModel.DisplayableBusiness(name: business.name, type: business.businessType[0].displayName,image: image, reviewCount: 30)
                anotherList.append(displayed)
            }
            passingOn[category] = anotherList
            
            
        }
        self.viewController?.displayBusinesses(viewModel: Home.FetchBusinesses.ViewModel(businesses: passingOn))
    }
    
}
