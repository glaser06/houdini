//
//  HomeInteractor.swift
//  ContractorApp
//
//  Created by Zaizen Kaegyoshi on 11/8/17.
//  Copyright (c) 2017 Team5. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeBusinessLogic
{
    func fetchCategories()
    func fetchBusinesses()
}

protocol HomeDataStore
{
    //var name: String { get set }
    var businesses: [String : [Business]]  { get set }
    
}

class HomeInteractor: HomeBusinessLogic, HomeDataStore
{
    var presenter: HomePresentationLogic?
    var worker: ListBusinessesWorker = ListBusinessesWorker()
    var businesses: [String : [Business]] = [:]
    var homeWorker: HomeWorker = HomeWorker()
    var yelpWorker: YelpWorker = YelpWorker()
    
    // MARK: Do something
    func fetchCategories() {
//        homeWorker.fetchCategorie { (data) in
//            self.presenter?.presentCategories(response: Home.FetchCategories.Response(data: data))
//        }
    }
    func fetchBusinesses() {
//        most popular (most reviewed)
        YelpAPI.cacher.tokenWaiter.notify(queue: DispatchQueue.main) {
            self.yelpWorker.search(params: YelpAPI.SearchParam(term: "", location: "", longitude: -79.95049, lattitude: 40.45659, radius: 20000, limit: 4, sort_by: "review_count", categories: "homeservices")) { (results) in
                
                self.businesses = ["Popular": results]
                self.presenter?.presentBusinesses(response: Home.FetchBusinesses.Response(businesses: self.businesses))
                for (index, each) in results.enumerated() {
                    self.homeWorker.fetchImage(imgURL: each.heroImageURL, completion: { (image) in
                        self.businesses["Popular"]![index].images.append(image)
                        self.presenter?.updateImage(response: Home.UpdateImage.Response(image: image, section: "Popular", index: index))
                    })
            
                }
                
                
            }
        }
        
        
//        self.worker.getBusinesses(completion: { (newData) in
//            self.businesses = newData
//            self.presenter?.presentBusinesses(response: Home.FetchBusinesses.Response(businesses: self.businesses))
//        })
    }
//    func search(request: ListBusinesses.Search.Request) {
//        let query = request.query
//
//        let r = self.businesses.first!.value
//        self.results = r
//        let resp = ListBusinesses.Search.Response(businesses: results, query: query)
//        self.presenter?.presentSearch(response: resp)
//
//    }
    
    
}
